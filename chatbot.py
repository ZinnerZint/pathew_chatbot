import google.generativeai as genai
from config import GEMINI_API_KEY
from db import search_places   # <-- ‡πÉ‡∏ä‡πâ DB ‡πÅ‡∏ó‡∏ô mock
from random import choice

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash-lite")

def analyze_query(user_input: str) -> dict:
    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏∏‡∏°‡∏û‡∏£
    ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: "{user_input}"
    ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
    {{
      "category": "...",
      "tambon": "...",
      "price": "..."
    }}
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null
    """
    response = model.generate_content(prompt)
    try:
        import json
        return json.loads(response.text)
    except:
        return {"category": None, "tambon": None, "price": None}

def get_answer(user_input: str):
    analysis = analyze_query(user_input)
    category = analysis.get("category")
    tambon = analysis.get("tambon")
    price = analysis.get("price")

    if not (category or tambon or price):
        return "‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡∏ô' ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôÇ"

    results = search_places(category=category, tambon=tambon, limit=5)

    if results:
        place = choice(results)  # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢
        reply = f"{place['name']} ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏• {place['tambon']} "
        if place.get("description"):
            reply += f"{place['description']} "
        if place.get("highlight"):
            reply += f"‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠ {place['highlight']} "
        if price:
            reply += f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ {price} ‡∏Ñ‡∏£‡∏±‡∏ö"
        return reply.strip()
    else:
        return f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö {category or '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'} ‡πÉ‡∏ô‡∏ï‡∏≥‡∏ö‡∏• {tambon or '‡∏ô‡∏µ‡πâ'} ‡∏Ñ‡∏£‡∏±‡∏ö"

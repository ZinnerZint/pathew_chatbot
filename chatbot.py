import json
from typing import List, Dict, Tuple, Optional

import google.generativeai as genai
from config import GEMINI_API_KEY
from db import search_places, search_places_nearby

# ----- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LLM -----
genai.configure(api_key=GEMINI_API_KEY)
MODEL_NAME = "gemini-2.0-flash-lite"
model = genai.GenerativeModel(MODEL_NAME)

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß (‡∏õ‡∏£‡∏±‡∏ö/‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
KNOWN_TAMBON = {"‡∏ä‡∏∏‡∏°‡πÇ‡∏Ñ", "‡∏ö‡∏≤‡∏á‡∏™‡∏ô", "‡∏î‡∏≠‡∏ô‡∏¢‡∏≤‡∏á", "‡∏õ‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≠‡∏á", "‡∏ä‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏Å", "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå", "‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ä‡∏¢‡∏£‡∏≤‡∏ä"}

def _safe_json(text: str) -> dict:
    if not text:
        return {}
    t = text.strip()
    if t.startswith("```"):
        t = t.strip("`")
        t = "\n".join(t.split("\n")[1:])
    try:
        return json.loads(t)
    except Exception:
        return {}

def analyze_query(user_input: str) -> dict:
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß" ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏∏‡∏°‡∏û‡∏£ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô
‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤‡∏ï‡∏≥‡∏ö‡∏•‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "{user_input}"

‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
  "category": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà/‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)",
  "tambon": "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)",
  "price": "‡∏ñ‡∏π‡∏Å/‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á/‡πÅ‡∏û‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)",
  "keywords": "‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏°‡∏ô‡∏π ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏® (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà null)"
}}
"""
    try:
        res = model.generate_content(prompt)
        data = _safe_json(res.text)
        return {
            "category": data.get("category"),
            "tambon": data.get("tambon"),
            "price": data.get("price"),
            "keywords": data.get("keywords"),
        }
    except Exception:
        return {"category": None, "tambon": None, "price": None, "keywords": None}

def _format_one_place(p: Dict) -> str:
    name = p.get("name") or "-"
    tambon = p.get("tambon") or "-"
    cat = p.get("category") or ""
    desc = (p.get("description") or "").strip()
    hi = (p.get("highlight") or "").strip()
    lat = p.get("latitude")
    lng = p.get("longitude")

    lines = [f"‚Ä¢ {name} ({cat}) ‚Äì ‡∏ï‡∏≥‡∏ö‡∏•{tambon}"]
    if desc:
        lines.append(desc)
    if hi:
        lines.append(f"‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô: {hi}")
    if isinstance(lat, (int, float)) and isinstance(lng, (int, float)):
        map_link = f"https://www.google.com/maps?q={lat},{lng}"
        lines.append(f"üó∫Ô∏è ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {lat:.6f}, {lng:.6f}  |  [‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà]({map_link})")
    return "\n".join(lines)

def _tambon_if_in_text(user_input: str, predicted_tambon: Optional[str]) -> Optional[str]:
    """
    ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà '‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏à‡∏£‡∏¥‡∏á' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß
    """
    if not predicted_tambon:
        return None
    ui = user_input.strip().lower()
    for t in KNOWN_TAMBON:
        if t in ui and predicted_tambon == t:
            return t
    return None  # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚Üí ‡∏ï‡∏±‡∏î‡πÄ‡∏î‡∏≤‡∏ó‡∏¥‡πâ‡∏á

def get_answer(user_input: str, user_lat: Optional[float] = None, user_lng: Optional[float] = None) -> Tuple[str, List[Dict]]:
    """
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô'
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‚Üí ‡∏Ñ‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    """
    analysis = analyze_query(user_input)
    category = analysis.get("category")
    tambon_pred = analysis.get("tambon")
    keywords = analysis.get("keywords")

    tambon = _tambon_if_in_text(user_input, tambon_pred)

    results: List[Dict] = []

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ near-by ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ ‡πÜ)
    if user_lat is not None and user_lng is not None:
        results = search_places_nearby(
            user_lat, user_lng,
            category=category, tambon=tambon, keywords=keywords,
            limit=10, within_km=15
        )
        intro = "‡πÄ‡∏à‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö:\n\n"
    else:
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‚Üí ‡∏Ñ‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        results = search_places(category=category, tambon=tambon, keywords=keywords, limit=10)
        intro = "‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö:\n\n"

    # ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏î‡πâ‡∏ß‡∏¢ keywords ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if keywords and isinstance(keywords, str):
        kw = [k.strip().lower() for k in keywords.split() if k.strip()]
        if kw:
            def ok(row):
                text = " ".join([
                    str(row.get("name") or ""),
                    str(row.get("description") or ""),
                    str(row.get("highlight") or ""),
                ]).lower()
                return all(k in text for k in kw)
            filtered = list(filter(ok, results))
            if filtered:
                results = filtered

    if not results:
        if user_lat is not None and user_lng is not None:
            return ("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 15 ‡∏Å‡∏°. ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó/‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", [])
        return ("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡∏ö‡∏•", [])

    body = "\n\n".join(_format_one_place(p) for p in results)
    return (intro + body, results)

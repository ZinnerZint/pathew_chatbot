# app.py (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
import streamlit as st
import google.generativeai as genai
from rag_db import search_relevant_places, PATHIO_TAMBONS, ensure_schema

genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
st.set_page_config(page_title="TripTech AI ‚Äì Pathio Guide", page_icon="üå¥")
st.title("üå¥ TripTech AI ‚Äì ‡πÑ‡∏Å‡∏î‡πå‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß")

# ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô: ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ schema
ensure_schema()

if "messages" not in st.session_state:
    st.session_state.messages = []

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

user_input = st.chat_input("‡∏≠‡∏¢‡∏≤‡∏Å‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‚Ä¶")

def build_prompt(history_text: str, context: str) -> str:
    tambon_text = ", ".join(PATHIO_TAMBONS)
    return f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏Å‡∏î‡πå‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏∏‡∏°‡∏û‡∏£" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏°‡∏µ: {tambon_text}

‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏û‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∏‡πà‡∏ô‡∏ô‡πâ‡∏≠‡∏á
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢
- ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏£‡∏Å
- ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô 8 ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß

‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤:
{history_text}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (RAG):
{context}

‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏î‡∏¥‡∏°
‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏Å‡∏î‡πå‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
"""

if user_input:
    st.chat_message("user").markdown(user_input)
    st.session_state.messages.append({"role": "user", "content": user_input})

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å PostgreSQL
    results = search_relevant_places(user_input, top_k=6)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
    lines = []
    for r in results:
        line = f"- {r['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà']} ‚Ä¢ ‡∏ï‡∏≥‡∏ö‡∏• {r['‡∏ï‡∏≥‡∏ö‡∏•']} :: {r.get('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢','')}"
        if r.get("‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô"):
            line += f" ‚Ä¢ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô: {r['‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô']}"
        lines.append(line)
    context = "\n".join(lines) if lines else "‚Äî ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏õ‡∏∞‡∏ó‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äî"

    # ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó
    history_text = ""
    for m in st.session_state.messages:
        role = "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" if m["role"] == "user" else "AI"
        history_text += f"{role}: {m['content']}\n"

    prompt = build_prompt(history_text, context)

    try:
        model = genai.GenerativeModel(model_name="gemini-2.0-flash-lite")
        response = model.generate_content(prompt)
        bot_reply = (response.text or "").strip() or "‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
    except Exception as e:
        bot_reply = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Gemini: {e}"

    st.chat_message("assistant").markdown(bot_reply)
    st.session_state.messages.append({"role": "assistant", "content": bot_reply})

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    for r in results:
        img = r.get("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", "")
        if isinstance(img, str) and img.startswith(("http://", "https://")):
            st.image(img, caption=r.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", ""), use_container_width=True)
